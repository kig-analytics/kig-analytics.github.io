<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://localhost:4000/</link>
    <description></description>
    <pubDate>Fri, 21 Jul 2017 15:57:08 -0500</pubDate>
    
      <item>
        <title></title>
        <link>http://localhost:4000/2017/07/21/2017-07-21-gs-presentation.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/21/2017-07-21-gs-presentation.html</guid>
        <description>&lt;div&gt;
&lt;img src=&quot;img/night.png&quot; class=&quot;img-responsive&quot; alt=&quot;nightlit southside&quot; width=&quot;1268&quot; height=&quot;327&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;At KIG CRE LLC. we have been building a tool to make the development site selection process more dynamic and efficient. With this tool, a developer can parametrize by zoning, TOD areas, land square footage, and the total buildable square footage on a site.&lt;/p&gt;

&lt;h3 id=&quot;filtering-zoning&quot;&gt;Filtering Zoning&lt;/h3&gt;

&lt;p&gt;The first parameter many developers encounter in terms of site selection is zoning. Often, an owner has a specific zoning class or range in mind&lt;/p&gt;

&lt;h3 id=&quot;tod-areas&quot;&gt;TOD Areas&lt;/h3&gt;

&lt;p&gt;Filter down by TOD areas. Transit-Oriented Development is critical to many developers. Our tool enables filtering zoning and building information by their distance from a particular transit node. In this example we utilize the data from the CTA L line and the Metra Commuter Line stations as our transit nodes.&lt;/p&gt;

&lt;p&gt;Eventually the tool will enable selection of specific transit nodes and realtime adjustent of the desired ditance from a node.&lt;/p&gt;

&lt;h3 id=&quot;existing-current-structure-data&quot;&gt;Existing Current Structure Data&lt;/h3&gt;

&lt;p&gt;Next, it’s critical to understand the current structures and their information that lie within the resulting zoning districts from Zoning &amp;amp; TOD filtering. Associated information includes year built, number of floors, and square footage - all useful in determing the difficulty of developing upon a site.&lt;/p&gt;

&lt;p&gt;Note: Chicago footprint data does not have accurate building square footage data for all buildings in the city - unknown square footages are replaced with a zero.&lt;/p&gt;

&lt;h3 id=&quot;determine-building-potential&quot;&gt;Determine Building Potential&lt;/h3&gt;

&lt;p&gt;Utilizing the FAR associated with a particular zoning class, we can calculate the maximum allowable floor area for a potential development in an area:&lt;/p&gt;

&lt;p&gt;In the future, we could add other ordinaces and bonuses that city’s can award for affordable housing or sustainable development practices.&lt;/p&gt;

&lt;h3 id=&quot;data-diligence-and-owner-identification&quot;&gt;Data Diligence and Owner Identification&lt;/h3&gt;

&lt;p&gt;With our work with the Chicago datasets, we have found that updates often occur only on an annual or bi-annual basis. The resulting erosion of accuracy requires diligence with more up-to-date sources on the current use, zoning, and ownership of a given site.&lt;/p&gt;

&lt;p&gt;For verifying ownership, we can also add an additional layer for parcel mapping, able to reveal associated ownership information from local assessor and recorder offices.&lt;/p&gt;

&lt;h3 id=&quot;goal--scaling&quot;&gt;Goal &amp;amp; Scaling&lt;/h3&gt;

&lt;p&gt;A singular experience of being able to add or remove any parameter layers of interest- including zoning, TOD areas (including specific locations, adjustable radii), current building footprints, buildable square footage, and ownership data.&lt;/p&gt;

&lt;p&gt;Once complete, this tool could easily be scaled to other metropolitan areas within the United States. The primary requirement would be complete and up-to-date open datatsets from city and county governments. The datasets needed would include citywide zoning and building footprint GIS data, as well as countywide parcel GIS data. A zoning key used to understand the allowable FAR associated with each zoning class would also be useful.&lt;/p&gt;

&lt;h3 id=&quot;method&quot;&gt;Method&lt;/h3&gt;

&lt;p&gt;Data on&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Jul 2017 15:57:08 -0500</pubDate>
      </item>
    
      <item>
        <title>Biotech</title>
        <link>http://localhost:4000/2017/04/02/biotech.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/02/biotech.html</guid>
        <description>
</description>
        <pubDate>Sun, 02 Apr 2017 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>The Layers of the Urban Environment - Mapzen Vector Tiles &amp; D3</title>
        <link>http://localhost:4000/2017/01/18/d3-map.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/18/d3-map.html</guid>
        <description>&lt;div&gt;
&lt;img src=&quot;img/night.png&quot; class=&quot;img-responsive&quot; alt=&quot;nightlit southside&quot; width=&quot;1268&quot; height=&quot;327&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;How can we create lightweight digital maps that can be easily and rapidly modified to display new data? A little exploration of mine in digital map creation through the use of &lt;a href=&quot;https://mapzen.com/projects/vector-tiles/&quot;&gt;Mapzen Vector Tiles&lt;/a&gt; and &lt;a href=&quot;www.d3js.org&quot;&gt;D3.js&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-are-vector-tiles&quot;&gt;What are Vector Tiles?&lt;/h3&gt;

&lt;p&gt;Many current day digital map technologies are often slow - sending or streaming pre-rendered data in the form of raster files to a user’s device. This can lead to inefficient loading and tedious updating of digital maps. Mapzen’s Vector Tiles avoid sending large pre-rendered graphics files by simply dividing the map (sourced from the &lt;a href=&quot;https://www.openstreetmap.org/#map=5/51.500/-0.100&quot;&gt;OpenStreetMap&lt;/a&gt;) into a grid of tiles. Each tile is represented by a set of paths and features encoded in json / topojson / or similar object based on request.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;Firstly, some source files are needed for mapping with D3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A basic D3 source from &lt;code class=&quot;highlighter-rouge&quot;&gt;//d3js.org/d3.v3.min.js&lt;/code&gt;, which can be copied locally&lt;/li&gt;
  &lt;li&gt;A source file for working with d3 geo-tiles, which can be found &lt;a href=&quot;https://github.com/d3/d3-plugins/tree/master/geo/tile&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-map&quot;&gt;Basic Map&lt;/h3&gt;
&lt;p&gt;Let’s begin with a basic map of the Chicago Area, showing only land and water&lt;/p&gt;

&lt;div&gt;
&lt;img src=&quot;img/map0.png&quot; class=&quot;img-responsive&quot; alt=&quot;map 0&quot; width=&quot;960&quot; height=&quot;500&quot; /&gt;
&lt;/div&gt;

&lt;!-- &lt;div&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;styles0.css&quot; /&gt;
&lt;script src=&quot;//d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;d3.geo.tile.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;map0.js&quot;&gt; &lt;/script&gt;
&lt;/div&gt; --&gt;

&lt;h4 id=&quot;html--js&quot;&gt;HTML / JS&lt;/h4&gt;

&lt;p&gt;The source code, along with explanatory comments, can be found below&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;styles.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//d3js.org/d3.v3.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d3.geo.tile.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//project based on https://bl.ocks.org/mbostock/5616813&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//Mapzen attribution: Mapzen, © OpenStreetMap contributors, Who’s On First, Natural Earth, and openstreetmapdata.com&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//define width and height of map&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;960&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    	&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    	&lt;span class=&quot;c1&quot;&gt;//set up tiling based on width and height parameters&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//use a mercator projection to transform coordinates to spherical&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;projection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mercator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;87.6298&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;41.8781&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// sf : center([-122.4400, 37.7524]), chicago: center([-87.6298, 41.8781])&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// change scale here, 21 is about z13&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//calculation of pathing based on our projection&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tilePath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//creation of svg to be populated with our map features&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;svg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;//setting svg background color to something other than white&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;100%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;100%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    	&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#ffcc66&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//set up layer class for styling&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;svg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//layers of information that we are interested in displaying&lt;/span&gt;
  	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'water'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'earth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  	&lt;span class=&quot;c1&quot;&gt;//gather data from mapzen and translate it to actual svg paths&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tile&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;projection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
	  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;g&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	      &lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://tile.mapzen.com/mapzen/vector/v1/all/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.json?api_key=mapzen-KAAL6W1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

		      &lt;span class=&quot;c1&quot;&gt;// build up a single concatenated array of all tile features from all tile layers&lt;/span&gt;
		      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
		      &lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
		        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
		            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;		      
		                &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		                &lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		    &lt;span class=&quot;c1&quot;&gt;//appending our new paths to the svg&lt;/span&gt;
	        &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort_rank&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort_rank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort_rank&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boundary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'_boundary'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-layer '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
	          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tilePath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;style-sheet&quot;&gt;Style Sheet&lt;/h4&gt;

&lt;p&gt;Initial styling for the basic map can be found below. Note that styling not defined for a layer will not appear in the output SVG.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;.map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;.layer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;.tile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;256px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;256px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;stroke-linejoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;stroke-linecap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;.earth-layer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffcc66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.water-layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.river&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.canal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#9DD9D2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.water&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ocean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#9DC9D8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.riverbank&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#9DD9D2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.water_boundary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ocean_boundary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.riverbank_boundary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#93cbc4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;adding-trainlines&quot;&gt;Adding Trainlines&lt;/h3&gt;

&lt;p&gt;We would now like to know where the train lines (Metra and Amtrack) go through Chicago. Thanks to the Mapzen Tile API, we can just add 1 (ONE!) newline of CSS, and a couple changes to our Javascript to see these additions to our map.&lt;/p&gt;

&lt;h5 id=&quot;css&quot;&gt;css&lt;/h5&gt;

&lt;p&gt;Railroads are specified using a .rail tag, defined as a &lt;em&gt;kind&lt;/em&gt; of the ‘roads’ layer. Each layer has a number of these kinds, which represent specific features that can have unique styling defined via css. You can check the complete &lt;a href=&quot;https://mapzen.com/documentation/vector-tiles/layers/&quot;&gt;documentation&lt;/a&gt; as to the list of layers and their respective kinds.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;.rail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#503D3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;js&quot;&gt;js&lt;/h5&gt;

&lt;p&gt;Change background colors and add more layers to work&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  	&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;width&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;100%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;100%&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fill&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#ffcc66&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


	&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

  	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;layers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'water'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'earth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'landuse'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'roads'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'buildings'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which results in the following map, train tracks included:&lt;/p&gt;

&lt;div&gt;
&lt;img src=&quot;img/map1.png&quot; class=&quot;img-responsive&quot; alt=&quot;map 1&quot; width=&quot;960&quot; height=&quot;500&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Notice that along with the railroad tracks outlined in black, the roads and highways of Chicago have been outlined in white. This is because both roads and railroads are part of the same &lt;code class=&quot;highlighter-rouge&quot;&gt;roads&lt;/code&gt; layer in Mapzen - and any feature not given a styling takes the default white (&lt;code class=&quot;highlighter-rouge&quot;&gt;#fff&lt;/code&gt;) value.&lt;/p&gt;

&lt;p&gt;With this knowledge in hand, we can add stylings for the rest of the layers to get a map of Chicago that provides details for roads, parks, piers, universities, and more.&lt;/p&gt;

&lt;h5 id=&quot;css-1&quot;&gt;css&lt;/h5&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;.earth-layer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ffcc66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.water-layer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.river&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.canal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#9DD9D2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.water&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ocean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#9DC9D8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.riverbank&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#9DD9D2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.water_boundary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.ocean_boundary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.riverbank_boundary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#93cbc4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.major_road&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fb7b7a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.minor_road&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.highway&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#FA4A48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.buildings-layer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#987284&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.supermarket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e600ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#e600ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.university&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.college&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#c63939&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#88D18A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.airport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#9e2e2e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#88D18A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.park&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nature_reserve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.wood&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.protected_land&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#77b300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#88D18A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.pier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.rail&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#503D3F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;map-of-the-loop&quot;&gt;Map of the Loop&lt;/h3&gt;

&lt;p&gt;Note that the level of details displayed on the map can change depending on what scaling factor you used in your projection. The below map was taken at scale 23; it’s best to test out scaling factors on your own map to get a good sense for what level of scaling is appropriate for your project. Full code for all the maps used here can be found on my github.&lt;/p&gt;

&lt;div&gt;
&lt;img src=&quot;img/loop.png&quot; class=&quot;img-responsive&quot; alt=&quot;loop map&quot; width=&quot;1107&quot; height=&quot;1201&quot; /&gt;
&lt;/div&gt;

&lt;!-- &lt;div&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot; /&gt;
&lt;script src=&quot;//d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;d3.geo.tile.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;map.js&quot;&gt; &lt;/script&gt;
&lt;/div&gt;
 --&gt;
&lt;h3 id=&quot;further-additions&quot;&gt;Further additions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Add new layers of data, pull from more online &lt;a href=&quot;https://mapzen.com/documentation/vector-tiles/layers/&quot;&gt;sources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pull in external data for display (elevation, census &amp;amp; news statistics)&lt;/li&gt;
  &lt;li&gt;Walk through the math of projection&lt;/li&gt;
  &lt;li&gt;Explain how zooming works&lt;/li&gt;
  &lt;li&gt;Add zoom-and-pan capability to the map&lt;/li&gt;
&lt;/ul&gt;

&lt;body&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;styles2.css&quot; /&gt;
&lt;script src=&quot;//d3js.org/d3.v3.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;d3.geo.tile.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;//s3.amazonaws.com/assets-staging.mapzen.com/ui/components/bug/bug.min.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;

	var width = Math.max(960, window.innerWidth),
    	height = Math.max(500, window.innerHeight);

	var tile = d3.geo.tile()
	    .size([width, height]);

	var projection = d3.geo.mercator()
	    .center([-87.6298, 41.8781]) // sf : center([-122.4400, 37.7524]), chicago: center([-87.6298, 41.8781])
	    .scale((1 &lt;&lt; 21) / 2 / Math.PI) // change scale here, 21 is about z13
	    .translate([width / 2, height / 2]);

	var tileProjection = d3.geo.mercator(); //not sure if we need this

	var tilePath = d3.geo.path()
	    .projection(projection);

	var map = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
	    .attr(&quot;class&quot;, &quot;map&quot;)
	    .attr(&quot;width&quot;, width)
	    .attr(&quot;height&quot;, height);
	
	map.append(&quot;rect&quot;)
	    	.attr(&quot;width&quot;, &quot;100%&quot;)
	    	.attr(&quot;height&quot;, &quot;100%&quot;)
	    	.attr(&quot;fill&quot;,&quot;#313842&quot;); //old color #ffcc66

	// Append Div for tooltip to SVG
	var div = d3.select(&quot;body&quot;)
			    .append(&quot;div&quot;)   
	    		.attr(&quot;class&quot;, &quot;tooltip&quot;)               
	    		.style(&quot;opacity&quot;, 0);

	var layer = map.append(&quot;svg&quot;)
	    .attr(&quot;class&quot;, &quot;layer&quot;);

  	var layers = ['water', 'earth', 'landuse', 'roads', 'buildings'];

	map.selectAll(&quot;g&quot;)
	    .data(tile
	      .scale(projection.scale() * 2 * Math.PI)
	      .translate(projection([0, 0])))
	  .enter().append(&quot;g&quot;)
	    .each(function(d) {
	      var g = d3.select(this);
	      d3.json(&quot;https://tile.mapzen.com/mapzen/vector/v1/all/&quot; + d[2] + &quot;/&quot; + d[0] + &quot;/&quot; + d[1] + &quot;.json?api_key=mapzen-KAAL6W1&quot;, function(error, json) {
	        if (error) throw error;

		      // build up a single concatenated array of all tile features from all tile layers
		      var features = [];
		      layers.forEach(function(layer){
		        if(json[layer])
		        {	
		            for(var i in json[layer].features)
		            {
		                // Don't include any label placement points
		                if(json[layer].features[i].properties.label_placement) { continue }

		                // Don't show large buildings at z13 or below.
		                if(layer == 'buildings') { continue }

		                // Don't show small buildings at z14 or below.
		                if(layer == 'buildings' &amp;&amp; json[layer].features[i].properties.area &lt; 2000) { continue }
		      
		                json[layer].features[i].layer_name = layer;
		                features.push(json[layer].features[i]);
		            }
		        }
		      });

	        g.selectAll(&quot;path&quot;)
	          .data(features.sort(function(a, b) { return a.properties.sort_rank ? a.properties.sort_rank - b.properties.sort_rank : 0 }))
	        .enter().append(&quot;path&quot;)
	          .attr(&quot;class&quot;, function(d) { var kind = d.properties.kind || ''; if(d.properties.boundary){kind += '_boundary';} return d.layer_name + '-layer ' + kind; })
	          .attr(&quot;d&quot;, tilePath);
	      });
	    });

	d3.csv(&quot;nine_clusters_ill.csv&quot;, function(data) {

	map.selectAll(&quot;circle&quot;)
		.data(data)
		.enter()
		.append(&quot;circle&quot;)
		.attr(&quot;cx&quot;, function(d) {
			return projection([d.longitude, d.latitude])[0];
		})
		.attr(&quot;cy&quot;, function(d) {
			return projection([d.longitude, d.latitude])[1];
		})
		.attr(&quot;r&quot;, function(d) {
			return 7;
		})
			.style(&quot;fill&quot;, function(d) {
				return cluster_color(d.cluster)
			})	
			.style(&quot;opacity&quot;, 0.75)	

		// Modification of custom tooltip code provided by Malcolm Maclean, &quot;D3 Tips and Tricks&quot; 
		// http://www.d3noob.org/2013/01/adding-tooltips-to-d3js-graph.html
		.on('mouseover', function (d) {
		    // console.log(d);
		    // console.log(d.properties.NAME);
		    div.transition()    
		        .duration(400)    
		        .style(&quot;opacity&quot;, .9);
		    div.text(&quot;cluster: &quot; + d.cluster + &quot; ID: &quot; + d.ID)
		        .style(&quot;left&quot;, (d3.event.pageX) + &quot;px&quot;)    
		        .style(&quot;top&quot;, (d3.event.pageY - 28) + &quot;px&quot;);
		    d3.select(this)
		        .attr(&quot;r&quot;, 14);
		    })
	    .on('mouseout', function (d) {
	      d3.select(this).attr(&quot;r&quot;, 7);
	      div.transition()        
	           .duration(500)      
	           .style(&quot;opacity&quot;, 0);
	    })
	});

	function cluster_color(cluster) {
		if (cluster == 1)
			return &quot;#d94545&quot;
		else if (cluster == 2)
			return &quot;#d96a45&quot;
		else if (cluster == 3)
			return &quot;#8fd945&quot;
		else if (cluster == 4)
			return &quot;#45d9d9&quot;
		else if (cluster == 5)
			return &quot;#456ad9&quot;
		else if (cluster == 6)
			return &quot;#8f45d9&quot;
		else if (cluster == 7)
			return &quot;#d945d9&quot;
		else if (cluster == 8)
			return &quot;#8fd945&quot;
		else (cluster == 9)
			return &quot;#45d98f&quot;
	}

&lt;/script&gt;
&lt;/body&gt;

</description>
        <pubDate>Wed, 18 Jan 2017 00:00:00 -0600</pubDate>
      </item>
    
      <item>
        <title>Conquering Symmetry with Prodirect Manipulation</title>
        <link>http://localhost:4000/2016/10/12/sketch-n-sketch.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/12/sketch-n-sketch.html</guid>
        <description>&lt;div&gt;
&lt;img src=&quot;img/opening.svg&quot; class=&quot;img-responsive&quot; alt=&quot;Altered Botanic Symbol&quot; width=&quot;1268&quot; height=&quot;357&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;The world of graphical development has historically been split between two camps: most applications either use a programmatic or direct paradigm for graphical manipulation. Could a hybrid of these two methods result in graphical tools that can be both easier and quicker to use? Let’s explore the benefits of a ‘prodirect’ style of graphical development with the Sketch-n-Sketch tool.&lt;/p&gt;

&lt;h2 id=&quot;why-prodirect-manipulation&quot;&gt;Why Prodirect Manipulation?&lt;/h2&gt;

&lt;p&gt;What might be some of the advantages of enabling both direct and programmatic manipulation of a graphical object?&lt;/p&gt;

&lt;h3 id=&quot;tweaking-graphical-objects-with-programmatic-manipulation-is-tedious&quot;&gt;Tweaking graphical objects with programmatic manipulation is tedious&lt;/h3&gt;

&lt;p&gt;As anyone who has had the “trying to get this div / svg / other in the exact right place” problem is aware, tweaking quantitative values of a graphical object - whatever its representation - is often tedious through pure use of code. Whether you’re trying to tweak the position, size, color, or some other parameter of an object, you often have to iterate through a series of code alterations even when you may have an extremely clear idea of your intended change.&lt;/p&gt;

&lt;h3 id=&quot;establishing-complex-relations-between-graphical-objects-is-hard-with-direct-manipulation&quot;&gt;Establishing complex relations between graphical objects is hard with direct manipulation&lt;/h3&gt;

&lt;p&gt;One solution to the tweaking issues with programmatic manipulation is to do away with a coding interface entirely. Instead, many modern graphical applications enable direct manipulation of objects through the cursor. This method excels at quick, reactive changes of scalable parameters in an object. This generally leads to very quick graphical development, but what if there are parameters which have no easy way of being scaled, such as color? Or have difficulty being translated into cursor movements, such as having parameters of multiple objects relate to one another?&lt;/p&gt;

&lt;p&gt;For the first question, the traditional solution has been the addition of an endless stream of widgets as an intermediary to affect these parameters. A color wheel. A luminance wheel. The entire toolbox for dealing with the unique complexities of text. While many graphical artists have become accustomed to the use of these widgets, the many layers of widgets - which essentially act as levers upon the underlying code of the graphical object - often leave something more to be desired.&lt;/p&gt;

&lt;p&gt;The second question of relations between objects is much more difficult for cursor manipulation to address. Firstly, how do you define a relation between two graphical objects? You could say the size of two objects are related - where one object scales it’s size as the other object’s size is modified. What if you wish to relate other parameters? Or have size scale non-linearly? Without a complex and likely unintuitive set of widgets, there is no obvious way to enable this interaction using direct manipulation. To solve this problem, we need a method of defining a shared variable between multiple objects that can be toggled to the desired value. Fortunately, progammatic manipulation already solves this problem for us.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The combination of the direct manipulation’s tactile nature and programmatic manipulation’s mastery of higher order parameters results in a more comprehensive and rapid means of developing graphical content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;implementing-symmetry-with-sketch-n-sketch&quot;&gt;Implementing Symmetry with Sketch-n-Sketch&lt;/h3&gt;

&lt;p&gt;One simple relation that can be difficult to implement and modify in a direct manipulation tool is symmetry. Using the &lt;a href=&quot;ravichugh.github.io/sketch-n-sketch/&quot;&gt;Sketch-n-Sketch&lt;/a&gt; tool, we can see how helpful prodirect manipulation can be in quickly producing a graphic design that can be easily revised upon request.&lt;/p&gt;

&lt;p&gt;As our example, we will attempt to recreate our own SVG version of the logo of the &lt;a href=&quot;http://www.chicagobotanic.org/&quot;&gt;Chicago Botanic Garden&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../12/botanic.svg&quot; alt=&quot;Botanic Garden Symbol&quot; width=&quot;434&quot; height=&quot;622&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To follow along, I would suggest going to &lt;a href=&quot;http://ravichugh.github.io/sketch-n-sketch/releases/v0.5.1/&quot;&gt;this version&lt;/a&gt; of Sketch-n-Sketch. One can either create the example from scratch to get the feel of developing with Sketch-n-Sketch or you can take a look at the existing Botanic Garden logo in the dropdown menu and play around with that example.&lt;/p&gt;

&lt;h4 id=&quot;1-defining-a-background&quot;&gt;1. Defining a background&lt;/h4&gt;

&lt;p&gt;First we would like to define the width and height of the background - for most designs this ranges in the few hundred pixels for each dimension. Remember that this background can easily be altered later either directly or via code. 
It’s a good idea to look through the prelude for the &lt;code class=&quot;highlighter-rouge&quot;&gt;little&lt;/code&gt; language, which can be found in the the dropdown menu of the Sketch-n-Sketch tool. Users of &lt;a href=&quot;https://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lisp&lt;/code&gt;&lt;/a&gt; and other &lt;a href=&quot;https://www.haskell.org/&quot;&gt;functional&lt;/a&gt; &lt;a href=&quot;http://elm-lang.org/&quot;&gt;programming&lt;/a&gt; languages will be fairly familiar with the basic functions, but might want to look at the SVG specific functions in the second half of the prelude.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;434&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;622&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It’s generally good practice to define the background (particularly the width and height) first when creating a new design. If you wish for certain aspects of the design to scale with the background - such as keeping a design centered - then other dimensions in the design will use these initial parameters as an input&lt;/p&gt;

&lt;p&gt;Next the actual background rectangle positioned at &lt;code class=&quot;highlighter-rouge&quot;&gt;(x,y) = (0,0)&lt;/code&gt;, which can be done with a rect function colored a satisfying &lt;code class=&quot;highlighter-rouge&quot;&gt;#83F52C&lt;/code&gt; green.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zones&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'none'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'#83F52C'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Exclamation marks, &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;, adjacent to a constant in the &lt;code class=&quot;highlighter-rouge&quot;&gt;little&lt;/code&gt; language represents a value that is frozen, or not mutable via direct manipulation.&lt;/p&gt;

&lt;h4 id=&quot;2-drawing-the-svg&quot;&gt;2. Drawing the SVG&lt;/h4&gt;

&lt;p&gt;To translate an object to an SVG representation, we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;svg&lt;/code&gt; function as defined in the prelude (it’s a good idea to look through the prelude, which can also be found in the the dropdown menu of the Sketch-n-Sketch tool).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This should result in the following code&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;434&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;622&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zones&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'none'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'#83F52C'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Selecting ‘run code’ reveals the following image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../12/greenbox.svg&quot; alt=&quot;Green Box&quot; width=&quot;434&quot; height=&quot;622&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-defining-a-leaf--bud-function&quot;&gt;3. Defining a leaf &amp;amp; bud function&lt;/h4&gt;

&lt;p&gt;Next we would like to draw the actual logo upon the background. We would like to define the two ‘leaves’ and the ‘bud’ of the logo.&lt;/p&gt;

&lt;p&gt;For the bud, we will need to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; function in order to construct the arc that constitutes the top of the bud. The ‘path’ function in the little function is defined below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;\&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stroke&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'path'&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fill'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stroke'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stroke-width'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;[]]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To learn more about how paths work in SVG, please take a look at the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths&quot;&gt;Mozilla tutorial&lt;/a&gt;, which provides a detailed description of the intricacies of bezier curves.&lt;/p&gt;

&lt;p&gt;Since we are trying to instantiate a symmetric relationship, we will use a single x-variable for each object that we will be reflected across the bisecting midline of the SVG. So let’s define a variable for this bisecting midline:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To define the bud, we will need to define 3 points, one for the bottom vertex (or ‘tip’), and two for the left and right ‘corners’ of the bud. Let’s define some constants to work with, namely the y coords, and a single x coord.&lt;/p&gt;

&lt;p&gt;Importantly, the exact numbers below are just placeholders (you can come up with your own!) - we will use direct manipulation once the design is complete, to tweak to our desired proportions.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;budTipY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, the ‘bud’ function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bud&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'white'&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'none'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'M'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budTipY&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerY&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerY&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerY&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rx1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;rx2&lt;/code&gt; are merely reflected xcoord around the midpoint. Next, we use the path function to define the tip with &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; then the left and right corners with &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt;. Don’t forget that the &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, as it decides the curvature between the two corners! (we’ve use a default &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; input that creates a circular curvature)&lt;/p&gt;

&lt;p&gt;Now we want to proceed with a similar procedure for the left and right leaves&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xc2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mx0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mxc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mxc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'white'&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'none'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'M'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'Q'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mxc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'M'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'Q'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mxc2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yc2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once again, the initial coordinate variables can be educated guesses - there’s no need to worry about accuracy at this stage of development. The &lt;code class=&quot;highlighter-rouge&quot;&gt;polarity&lt;/code&gt; argument determines whether the leaf is left (&lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;) or right (&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;). For the path in this case, the &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; represent the end points of a leaf, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt; is a control point that determines the curvature of the path.&lt;/p&gt;

&lt;h4 id=&quot;4-adjusting-constants-using-direct-manipulation&quot;&gt;4. Adjusting constants using direct manipulation&lt;/h4&gt;

&lt;p&gt;Now we need to add these new objects to our &lt;code class=&quot;highlighter-rouge&quot;&gt;svg&lt;/code&gt; object, as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(svg (concat [background [(leaf 1!) (leaf -1!) bud]]))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With our initial, dummy variables the design looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../12/badbotanic.svg&quot; alt=&quot;Bad Botanic&quot; width=&quot;434&quot; height=&quot;622&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hmmm… not quite right. Now we can use direct manipulation to adjust to make it look like our intended design. Cursor over the SVG to reveal the control points for the paths.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../12/botanic_zones.png&quot; alt=&quot;zones&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The entirety of the logo’s code is below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chicago&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Botanic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Garden&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'[Zones]'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;control&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;various&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bezier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;791&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;908&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;x0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;xc2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;325&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;362&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;222&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;702&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;190&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;\&lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mx0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mxc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mxc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xc1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polarity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'white'&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'none'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'M'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'Q'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mxc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yc1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'M'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'Q'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mxc2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yc2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mx0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;budTipY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;579&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;351&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bud&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'white'&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'none'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'M'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;midline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budTipY&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerY&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerY&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;'L'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rx2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;budCornerY&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Z'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zones&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'none'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'#83F52C'&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;thanks&quot;&gt;Thanks&lt;/h3&gt;
&lt;p&gt;I would like to thank Professor Ravi Chugh for the chance to work under him as a research assistant and TA for 2015 - 2016. Working under Prof. Chugh, I helped in the development of the Sketch-n-Sketch tool and created a number of the original examples.&lt;/p&gt;

&lt;p&gt;Below you can find the abstract for the 2015 PLDI paper:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We present the Sketch-n-Sketch editor for Scalable Vector Graphics (SVG) that integrates programmatic and direct manipulation, two modes of interaction with complementary strengths. In Sketch-n-Sketch, the user writes a program to generate an output SVG canvas. Then the user may directly manipulate the canvas while the system infers real-time updates to the program in order to match the changes to the output. To achieve this, we propose (i) a technique called trace-based program synthesis that takes program execution history into account in order to constrain the search space and (ii) heuristics for dealing with ambiguities. Based on our experience writing more than 40 examples and from the results of a study with 25 participants, we conclude that Sketch-n-Sketch provides a novel and effective workflow between the boundaries of existing programmatic and direct manipulation systems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;To learn more about prodirect manipulation visit the &lt;a href=&quot;http://ravichugh.github.io/sketch-n-sketch/&quot;&gt;project site&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;To test out the latest version of the tool itself, check out the &lt;a href=&quot;http://ravichugh.github.io/sketch-n-sketch/releases/v0.5.1/&quot;&gt;demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To read the PLDI paper, &lt;a href=&quot;https://arxiv.org/abs/1507.02988&quot;&gt;here&lt;/a&gt; is where it lives on arxiv&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Further Avenues in Prodirect Manipulation</title>
        <link>http://localhost:4000/2016/10/05/app-pd.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/05/app-pd.html</guid>
        <description>&lt;p&gt;The original target medium of the &lt;a href=&quot;http://ravichugh.github.io/sketch-n-sketch/&quot;&gt;Sketch-n-Sketch&lt;/a&gt; tool was SVG (Scalable Vector Graphics). However, the paradigm of prodirect manipulation has the potential across a broad spectrum of graphical software including data visualization, web and UI design, document preparation systems, and even 3D digital fabrication design.&lt;/p&gt;

&lt;p&gt;While each of these domains have very different purposes - and each faces unique challenges - the current landscape of tools for each of them have surprising parallels to the same issues Sketch-n-Sketch deals confronts with SVG editors.&lt;/p&gt;

&lt;h4 id=&quot;benefits-in-3d-digital-fabrication-design&quot;&gt;Benefits in 3D Digital Fabrication Design&lt;/h4&gt;

&lt;p&gt;As 3D printing and other manufacturing have grown in popularity, the number and complexity of tools in the arena has also grown. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_computer-aided_design_editors&quot;&gt;list&lt;/a&gt; of CAD applications and their associated languages have a wide range of strengths - often a result of targeting a specific use case in manufacturing or design. &lt;a href=&quot;http://www.openscad.org/&quot;&gt;OpenSCAD&lt;/a&gt; is a popular, open-source and lightweight editor. The UI follows a similar dynamic to Sketch-n-Sketch’s (and other &lt;a href=&quot;http://elm-lang.org/examples/time&quot;&gt;graphical&lt;/a&gt; &lt;a href=&quot;https://jsfiddle.net/&quot;&gt;editors’&lt;/a&gt;) interface, with lefthand pane for code and a righthand pane for the resulting object.&lt;/p&gt;

&lt;div&gt;
&lt;img src=&quot;/2016/10/05/openscad.png&quot; class=&quot;img-responsive&quot; alt=&quot;OpenScad explanation&quot; width=&quot;927&quot; height=&quot;474&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;An example design in OpenSCAD, from the &lt;a href=&quot;http://www.tridimake.com/2014/09/how-to-use-openscad-tricks-and-tips-to.html&quot;&gt;tridimake tutorial&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Currently, OpenSCAD utilizes a programmatic approach to object manipulation. Somewhat similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;little&lt;/code&gt; for Sketch-n-Skecth, the OpenSCAD language employs &lt;code class=&quot;highlighter-rouge&quot;&gt;object()&lt;/code&gt; functions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;polyhedron()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sphere()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;cylinder()&lt;/code&gt; with parameter arguments to define geometric objects which are then rendered. Recently, OpenSCAD has begun an &lt;a href=&quot;https://amarjeetkapoor1.wordpress.com/2016/07/04/user-interface-for-customizing-models/&quot;&gt;effort&lt;/a&gt; to enable some use of direct manipulation through the implementation of widgets. While still in its early stages, this suggests that OpenSCAD is moving closer to enable prodirect manipulation.&lt;/p&gt;

&lt;p&gt;Many other CAD tools, such as Autodesk’s &lt;a href=&quot;http://www.autodesk.com/products/autocad/overview&quot;&gt;AutoCAD&lt;/a&gt; and Ultimaker’s &lt;a href=&quot;https://ultimaker.com/en/products/cura-software&quot;&gt;Cura&lt;/a&gt; take a decidedly direct approach to manipulating 3D objects.&lt;/p&gt;

&lt;p&gt;With both of these approaches to CAD, we see some of the same classic challenges - the tediousness of iteration in OpenSCAD’s case and the limited ability to define complex relationships in the case of direct CAD tools. To see how programmatic augmentation might assist these tools, let us examine common use cases. In the case of OpenSCAD, rapid development of models is always a goal - however this can be hampered by the number of arguments that OpenSCAD functions can require (particularly for the many coordinate arguments for complicated polyhedral objects).&lt;/p&gt;

&lt;p&gt;It is often best practice to create functions to calculate these coordinates (the archimedean solids are good examples of these), but some designs do not fall easily into the realm of being defined functionally. In these instances, having the ability to directly manipulate the object - and have these changes reflected in its &lt;code class=&quot;highlighter-rouge&quot;&gt;.scad&lt;/code&gt; file - would be greatly beneficial.&lt;/p&gt;

&lt;p&gt;In direct manipulation tools like AutoCAD, it can often be the case that a designer or engineer wishes to have multiple dimensions correlate to another in particular ways. For example, imagine the blueprint of a room in AutoCAD. What if an engineer wishes to insert &lt;code class=&quot;highlighter-rouge&quot;&gt;f(x)&lt;/code&gt; number of evenly spaced windows along a wall of the house, where &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; is the length of that wall (and &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; could be changed at any time)? Or what if the engineer wished to change the spacing between each window, but have them all remain equal? Or retain the existing spacing but change the size of the windows?&lt;/p&gt;

&lt;p&gt;Autodesk has put a significant time and effort into enabling complex interactions and relationships between objects in AutoCAD. The large set of helpful additional tools and widgets could very well be able to handle the situation outlined above. However, a programmatic interface for structuring relationships between different scalar quantities in an object would be an elegant solution. On one hand, it may prove to initially be more difficult to learn for those uninitiated with coding. On the other hand, it could be a means of expanding the horizon of allowable interactions with an object.&lt;/p&gt;

&lt;h4 id=&quot;benefits-in-data-visualization&quot;&gt;Benefits in Data Visualization&lt;/h4&gt;

&lt;p&gt;Data Visualization has become a growing and important field in many areas, from academia to the press. Many a published scientific paper, regardless of field, is accompanied by a set of charts and diagrams. Many major news publications such as the New York Times or the Washington Post employ extensive use of data visualization; &lt;a href=&quot;fivethirtyeight.com&quot;&gt;FiveThirtyEight’s&lt;/a&gt; central focus is exploring issues through data analysis and visualization. Whatever the purpose, data visualization in any of these domains is constructed via programmatic (&lt;a href=&quot;https://www.stat.auckland.ac.nz/~paul/RGraphics/rgraphics.html&quot;&gt;R&lt;/a&gt;, &lt;a href=&quot;d3js.org&quot;&gt;D3.js&lt;/a&gt;) or direct manipulation (Adobe Illustrator, PowerPoint).&lt;/p&gt;

&lt;p&gt;What might be some of the advantages of prodirect manipulation in the realm of Data Visualization? Traditionally programmatic tools could benefit from speedier development of the foundational structure of visualizations - length and demarcation of axes, data labeling, sizing of charts. Traditionally direct tools could benefit from increased flexibility to create unique charts. Currently, such applications often involve a number of ‘cookie-cutter’ charts which can fail to fully depict data to a user’s satisfaction - to mention nothing of aesthetics.&lt;/p&gt;

&lt;p&gt;One potentially interesting emergent behavior is the editing of a source data set via direct manipulation. Under a prodirect paradigm, a dataset can be treated as a collection of constants that can be toggled by interaction with the graphical object. This might lead to several interesting use cases. For complex and / or multidimensional data models where there are clearly defined relationships between constants, manipulation could reveal insights that might otherwise be difficult to notice. One could also imagine novel ways of collecting new data from user participants via interacting directly with the visualization.&lt;/p&gt;

&lt;h4 id=&quot;benefits-in-web-and-ui-design&quot;&gt;Benefits in Web and UI Design&lt;/h4&gt;

&lt;p&gt;While the space of Web and UI Design is one that is continually evolving with new tools, it is nevertheless another area that is divided between programmatic and direct tools. Once entirely composed of programmatic development with raw coding of HTML / CSS / javascript, tools aimed at lessening coding interaction like &lt;a href=&quot;squarespace.com&quot;&gt;Squarespace&lt;/a&gt;, &lt;a href=&quot;wordpress.com&quot;&gt;Wordpress&lt;/a&gt;, and &lt;a href=&quot;wix.com&quot;&gt;Wix&lt;/a&gt;. Programmatic tools have also evolved; commonly used accesories like Chrome &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/inspect-styles/&quot;&gt;devtools&lt;/a&gt; allow for more dynamic interaction with webpages and new &lt;a href=&quot;elm-lang.org&quot;&gt;languages&lt;/a&gt; abstract away micromanagement of javascript and styling.&lt;/p&gt;

&lt;div&gt;
&lt;img src=&quot;https://developers.google.com/web/tools/chrome-devtools/inspect-styles/imgs/selector-hover.png&quot; class=&quot;img-responsive&quot; alt=&quot;Chrome Devtools&quot; width=&quot;856&quot; height=&quot;546&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Chrome Devtools in action, source: &lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/inspect-styles/&quot;&gt;Chrome Devtool tutorial&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One could imagine a modified version of a browser devtool which would also facilitate prodirect manipulation. Many browser devtools already implement highlighting around &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;s and other html objects; a prodirect browser devtool would allow these to be interactable in the same fashion as Sketch-n-sketch. This would particularly helpful in development situations when the code for a webpage is complex, and finding the proper variable to modify is either non-obvious or tedious.&lt;/p&gt;

&lt;h4 id=&quot;benefits-in-document-preparation-systems&quot;&gt;Benefits in Document Preparation Systems&lt;/h4&gt;

&lt;p&gt;Documentation preparation or typesetting systems such as &lt;a href=&quot;https://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; utilize a programmatic interface to manipulate a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tex&lt;/code&gt; file that is subsequently compiled into a fully formatted and styled document. However, just as with many programmatic manipulation interfaces, this can often lead to tedious trial-and-error corrections - often when an author has already decided on the exact look and composition of a document.&lt;/p&gt;

&lt;p&gt;The premium in academic document preparation systems, LaTeX is famous (and infamous) for its use of programmatic manipulation. A user often desires control and rapid iteration from LaTeX tools such as &lt;a href=&quot;www.xm1math.net/texmaker/&quot;&gt;Texmaker&lt;/a&gt; or &lt;a href=&quot;sharetlatex.com&quot;&gt;sharelatex&lt;/a&gt;. However, a user can frequently run into undesired formatting - particularly when using more complex or obsure packages - that are tedious to remediate through code editing.&lt;/p&gt;

&lt;p&gt;A user armed with a prodirect typesetting tool could correct a formatting error: misaligned columns, elements that are un-centered, images that are not sized correctly and many other such issues. The user can then spend less time being preoccupied by the precise aethetics of their piece and more on the content they are writing.&lt;/p&gt;

</description>
        <pubDate>Wed, 05 Oct 2016 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>D3 Transitions &amp; Principal Component Analysis</title>
        <link>http://localhost:4000/2016/05/02/hex-map.html</link>
        <guid isPermaLink="true">http://localhost:4000/2016/05/02/hex-map.html</guid>
        <description>&lt;div&gt;
&lt;img src=&quot;img/pca.svg&quot; alt=&quot;Principal Component Analysis&quot; width=&quot;1268&quot; height=&quot;427&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;In this project I worked on in CS 23900 at UChicago, we take a look at how graphical transitions work
with D3.js and how to use Principle Component Analysis to determine correlation between multiple data sets.&lt;/p&gt;

&lt;h4 id=&quot;background&quot;&gt;Background:&lt;/h4&gt;

&lt;p&gt;In this demo, we use a hex map of the United States to explore some of the data on a variety of metrics: Obesity (&lt;code class=&quot;highlighter-rouge&quot;&gt;OB&lt;/code&gt;), Unemployment (&lt;code class=&quot;highlighter-rouge&quot;&gt;UN&lt;/code&gt;), Infant Mortality (&lt;code class=&quot;highlighter-rouge&quot;&gt;IM&lt;/code&gt;), Men vs. Women household earnings (&lt;code class=&quot;highlighter-rouge&quot;&gt;ME/WE&lt;/code&gt;) and the split of votes between Barack Obama and Mitt Romney in 2012 (&lt;code class=&quot;highlighter-rouge&quot;&gt;D,R&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Each of these displays a slightly different method of visualization. Color and lumosity are toggled to exemplify the different ways in which we signify certain colors. In some cases there are historical or cultural visualization tendencies that arise. For example blue signifying Democrat, red signifying Republican; the correlation of ‘hot’ or peak values to higher luminance and higher &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt; values for color while ‘cold’ to lower luminance and higher ‘b’ values.&lt;/p&gt;

&lt;p&gt;Each of these metrics at first glance would seem entirely unrelated - but utilizing a method known as Principal Component Analysis, we can compare across multiple dimensions of data to determine whether to find states with high correlation between data sets.&lt;/p&gt;

&lt;h4 id=&quot;demo&quot;&gt;Demo:&lt;/h4&gt;

&lt;p&gt;Demo: &lt;a href=&quot;index.html&quot;&gt;50 State Hex Map&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-explore-the-demo&quot;&gt;How to Explore the Demo&lt;/h3&gt;

&lt;h4 id=&quot;1-look-through-the-standard-data-sets&quot;&gt;1. Look through the standard data sets&lt;/h4&gt;
&lt;p&gt;Toggle through the buttons at the bottom right of the screen. The first six of these (are the visualizations of each of our datasets by themselves:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Obesity (OB uni)&lt;/li&gt;
  &lt;li&gt;Unemployment (UN uni)&lt;/li&gt;
  &lt;li&gt;Infant Mortality (IM uni)&lt;/li&gt;
  &lt;li&gt;D,R votes (PL uni)&lt;/li&gt;
  &lt;li&gt;D,R votes (PL,VA bi)&lt;/li&gt;
  &lt;li&gt;Men,Women Earn (ME,WE bi)
The fluid, linearly interpolated transitions are a result of the use of &lt;a href=&quot;https://bost.ocks.org/mike/transition/&quot;&gt;D3.js Transitions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-attempt-to-notice-correlations&quot;&gt;2. Attempt to notice correlations&lt;/h4&gt;
&lt;p&gt;Merely by toggling between the initial and the subsequent buttons among these six, is it possible two notice states where you think there might be a strong correlation?&lt;/p&gt;

&lt;h4 id=&quot;3-use-pca-to-combine-datasets&quot;&gt;3. Use PCA to combine datasets&lt;/h4&gt;
&lt;p&gt;To discern correlations in the datasets, check off two of of the datasets in the column below ‘PCA of’ - then click on one of the following buttons in the main column:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PCA component 0 (uni)&lt;/li&gt;
  &lt;li&gt;PCA component 1 (uni)&lt;/li&gt;
  &lt;li&gt;PCA components 0,1 (bi)
Were any of your hypotheses correct? Were there certain surprises?&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 02 May 2016 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Visualizing Basic Graph Theory with Elm</title>
        <link>http://localhost:4000/2015/11/25/graph-games.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/11/25/graph-games.html</guid>
        <description>&lt;div&gt;
&lt;img src=&quot;img/glt.svg&quot; alt=&quot;Cliques&quot; width=&quot;1268&quot; height=&quot;327&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;A short tutorial on some of the fundamentals of Graph Theory - including vertices, edges, degrees, cliques, colorings, and forbidden subgraphs. This is a project that I began working with Ridwan Syed on last winter in our Functional Programming class.&lt;/p&gt;

&lt;p&gt;I’m hoping to update it to Elm 0.16 during this winter break and do some reworking of the interface to use some of those found in Sketch-n-sketch.&lt;/p&gt;

&lt;p&gt;You can find the initial version of the demo here: &lt;a href=&quot;GraphLife3.html&quot;&gt;Graph Life 3&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;overview-of-lesson&quot;&gt;Overview of Lesson&lt;/h3&gt;

&lt;h4 id=&quot;1-degree&quot;&gt;1. Degree&lt;/h4&gt;
&lt;p&gt;Determine the degree of a given vertex by visual inspection&lt;/p&gt;

&lt;h4 id=&quot;2-cliques&quot;&gt;2. Cliques&lt;/h4&gt;
&lt;p&gt;Recognize what a clique is in a graph, and be able to notice cliques as part of a larger graph&lt;/p&gt;

&lt;h4 id=&quot;3-colorings&quot;&gt;3. Colorings&lt;/h4&gt;
&lt;p&gt;Learn how vertices can be colored, and the minimum number of colors needed to color a given graph&lt;/p&gt;

&lt;h4 id=&quot;4-forbidden-subgraph&quot;&gt;4. Forbidden Subgraph&lt;/h4&gt;
&lt;p&gt;Experiment with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Forbidden_subgraph_problem&quot;&gt;Forbidden Subgraph Problem&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;5-sandbox&quot;&gt;5. Sandbox&lt;/h4&gt;
&lt;p&gt;A sandbox mode to play around with a large graph&lt;/p&gt;

&lt;h3 id=&quot;construction&quot;&gt;Construction&lt;/h3&gt;

&lt;p&gt;We created a multi-level game that teaches a user basic graph theory by allowing them to directly manipulate the nodes and edges of a graph. On the technical side of things, our project consisted of several primary segments: firstly, is the underlying Graph data structure and and operations. We chose to design the structure as a construction of a dictionary of nodes and a list of edges – where an ‘edge’ is a tuple of keys corresponding to two nodes. Operation-wise, we implemented standard functions such as insertion, deletion, get, connect as well as additional more specific functions such as isClique and isOddCycle.&lt;/p&gt;

&lt;h4 id=&quot;phase-1&quot;&gt;Phase 1&lt;/h4&gt;
&lt;p&gt;We built up infrastructure to visualize the graphs and have them be interactive. This involved utilizing the elm-html library to create divs that would describe the visual attributes of the nodes and edges, at which point we added functionality from the Event sub-library of elm-html. This allowed nodes and edges to be clickable and hoverable, and send messages that could update the state of the graph.&lt;/p&gt;

&lt;h4 id=&quot;phase-2&quot;&gt;Phase 2&lt;/h4&gt;
&lt;p&gt;We created a gallery of functions which can be used to construct more complex graphs – n-sized cliques, peterson graphs, the szekeres snark, as well as the specific graphs for the levels that we have implemented.&lt;/p&gt;

&lt;h4 id=&quot;phase-3&quot;&gt;Phase 3&lt;/h4&gt;
&lt;p&gt;The interactions that we have implemented for the user include the highlighting of nodes and edges, the deletion of nodes and edges, the movement of nodes, and the collapsing of edges.&lt;/p&gt;

&lt;h4 id=&quot;phase-4&quot;&gt;Phase 4&lt;/h4&gt;
&lt;p&gt;We designed a levelling system that involves 4 specific topics of basic graph theory (degrees, cliques, colorings, and forbidden subgraphs) with each containing several levels of varying difficulties. We also provide with each level a short prompt with some hints, as well as the capability of resetting the level. We also provide a couple sandboxes with larger graphs in them so as to allow for more freeform graph interactions.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Nov 2015 00:00:00 -0600</pubDate>
      </item>
    
      <item>
        <title>Simulating Red-Black Trees with Elm</title>
        <link>http://localhost:4000/2015/11/22/red-black.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/11/22/red-black.html</guid>
        <description>&lt;div&gt;
&lt;img src=&quot;img/rbtree.svg&quot; alt=&quot;Not an Actual Red-Black Tree&quot; width=&quot;1268&quot; height=&quot;357&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;An interactive demo of Red-Black Trees. This demo enables insertion and displays when and how a Red-Black Tree rebalances itself upon a given insertion.&lt;/p&gt;

&lt;h4 id=&quot;background&quot;&gt;Background:&lt;/h4&gt;

&lt;p&gt;The &lt;strong&gt;Binary Search Tree&lt;/strong&gt; is one of the most important first data structures that a student of Computer Science learns. One of it’s key features - the ability to reduce a search to a &lt;code class=&quot;highlighter-rouge&quot;&gt;O(log(n))&lt;/code&gt; time - is one such reason for the the BST’s prominence, but it comes with a catch: it depends on how well the tree is balanced. A tree without balance is no better than a linked list - a search will take &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; time. The balance of the basic BST is dependent upon the order in which new nodes are inserted. Therefore, a number of more complex tree data structures were created to help ensure balance regardless of the sequencing of the input.&lt;/p&gt;

&lt;p&gt;One such data structure is the &lt;strong&gt;Red-Black Tree&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;properties&quot;&gt;Properties:&lt;/h4&gt;

&lt;p&gt;It is first helpful to declare some of the general properties of the Red-Black Tree before we take a closer look of what it looks like in action:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Every node has a color; either red or black&lt;/li&gt;
  &lt;li&gt;The root node of the tree is always black&lt;/li&gt;
  &lt;li&gt;A red node cannot have a red child&lt;/li&gt;
  &lt;li&gt;New nodes that are not a root node begin as a red node&lt;/li&gt;
  &lt;li&gt;Every path a node to the leaves of the tree has the same number of black nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These declarations can seem a little strange upon first observance, but they work in interestingly synergistic ways to ensure the tree does not become unbalanced. Let’s take a look at the demo now, and see if we can spot some of these rules at work as the tree rebalances it self - insert the numbers &lt;code class=&quot;highlighter-rouge&quot;&gt;[3, 4, 5, 6, 7]&lt;/code&gt; into demo, and watch closely what happens (keep in mind, a standard BST would just create a straight line of nodes with that particular sequence!)&lt;/p&gt;

&lt;h4 id=&quot;the-demo&quot;&gt;The &lt;a href=&quot;DrawRBTree.html&quot;&gt;Demo&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;DrawRBTree.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-balancing-works-upon-insertion&quot;&gt;How Balancing Works Upon Insertion&lt;/h4&gt;

&lt;p&gt;When a new number is inserted into the tree, it initially follows the standard binary search tree insertion algorithm. It first compares itself with the root node and then recursively follows a path, to the right (greater than current node value) or left (less than node value) until it has encountered no more children. Subsequently, the new node is given the red color - if this violates one of the initial properties of red-black trees, then color changes and positional swaps are propogated up the tree.&lt;/p&gt;

&lt;h4 id=&quot;acknowledgements&quot;&gt;Acknowledgements:&lt;/h4&gt;

&lt;p&gt;Demo &amp;amp; background based off of the decription of Red-Black Trees in Chris Okazaki’s &lt;a href=&quot;https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504&quot;&gt;Purely Functional Data Structures&lt;/a&gt; which covers not only Red-Black Trees, but many other data structures in the context of Functional Languages.&lt;/p&gt;

&lt;p&gt;Project originally created for CMSC 223000 Functional Programming Winter 2015 at The University of Chicago taught by Prof. Ravi Chugh.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Nov 2015 00:00:00 -0600</pubDate>
      </item>
    
      <item>
        <title>Hello all!</title>
        <link>http://localhost:4000/2015/11/20/first-post.html</link>
        <guid isPermaLink="true">http://localhost:4000/2015/11/20/first-post.html</guid>
        <description>&lt;p&gt;My name is Jacob Albers, I’m a recent Computer Science graduate from
the University of Chicago. This will be a blog where I’ll collect and output
various thoughts on the stuff that interests me.
At this time, here are a few things that I’m thinking of putting up and talking
about:&lt;/p&gt;

&lt;h4 id=&quot;computer-science&quot;&gt;Computer Science&lt;/h4&gt;
&lt;p&gt;I’ll be putting up some posts on computer science related topics, that will
probably include some of the following points of interest:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data Visualization using D3.js&lt;/li&gt;
  &lt;li&gt;Functional Programming Languages: particularaly Elm and Haskell&lt;/li&gt;
  &lt;li&gt;Building useful applications with Functional Programming Languages&lt;/li&gt;
  &lt;li&gt;Computational Neuroscience: I’m still barely know anything in this area - will update!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;other-academic-stuff&quot;&gt;Other Academic Stuff?&lt;/h4&gt;
&lt;p&gt;I might also talk about interesting topics in other fields that I
enjoy looking at - these might include the following items&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Biology: I’m particularly interested (and want to get back to learning more at some point) about
some areas of biology including cellular and developmental signaling, Endocrinology, and Neuroscience&lt;/li&gt;
  &lt;li&gt;Economics: Around the areas of venture funding and business development&lt;/li&gt;
  &lt;li&gt;Statistics: Still learning more about this stuff!
These may be meshed with some CS project that I will be working on - stay tuned!&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fun-stuff&quot;&gt;Fun Stuff&lt;/h4&gt;
&lt;p&gt;I might also be putting up a bunch of not so serious things. Some of the things that I’m currently
thinking about:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Food recipes that I’ll be trying out&lt;/li&gt;
  &lt;li&gt;Updates on Shadowrun or Diplomacy games that I’m currently taking part in&lt;/li&gt;
  &lt;li&gt;If I work up the courage, may be some art pieces that I’ve made&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking forward to a bright future for this blog!&lt;/p&gt;

&lt;p&gt;-Jacob&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 00:00:00 -0600</pubDate>
      </item>
    
  </channel>
</rss>
